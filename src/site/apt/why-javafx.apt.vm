Why JavaFX

  JavaFX 2.0+ technology is a very good fit for a project of this type:

  * Very mature hardware acceleration. Large map images and large number counter images is no problem with either heap usage or performance.\
  Zooming, panning, effects and other transformations on images are hardware accelerated out of the box. JavaFX transparently uses DirectX on
  windows platforms, and OpenGL on iMac and Linux platforms. See {{{http://docs.oracle.com/javafx/2/architecture/jfxpub-architecture.htm}here}} for a good overview of the JavaFX architecture.


  * Programming model is a natural fit for application type. A crude prototype allowing you to move counters around on a map, with support for
  counter flipping, counter rotation and map zooming and panning can be written with only 200-300 lines of code.

  * Allows for easy development of modern, highly interactive and animated used interface, with clear seperation of concerns (model-view-presenter model),
  and a very powerful property binding model.

  * Cross platform - Windows, Mac and Linux and possible support port for iOS and android. JavaFX defines API's for handling interaction with
  touch devices (gestures). Support for ARM processors, for example Raspberry PI. Ports for iOS and Android are very looking very promissing as show {{{https://www.java.net/community/javafx/video/javafx-everywhere}here}}.

  * Tooling for JavaFX 2.0+ is very mature, with first class support in NetBeans, Eclipse and IntelliJ. Easy user interface design with {{{http://docs.oracle.com/javafx/scenebuilder/1/user_guide/jsbpub-user_guide.htm}SceneBuilder}} and\
  {{{http://fxexperience.com/scenic-view/}ScenicView}}

  * Very good Maven plugin support.

  * Several {{{http://docs.oracle.com/javafx/2/deployment/jfxpub-deployment.htm}distribution models}} to choose from - JNPL (launch in browser), {{{http://docs.oracle.com/javafx/2/deployment/self-contained-packaging.htm#BCGIBBCI}self-contained application packaging}}\ support
  (distributed with JVM runtime for no hassle compability). Custom installer support based on Inno's provided by JavaFX.

  * Very good media and browser support. Embedded browser support is provided through the WebView component which is based on WebKit.

  * Obviously using Java gives access to the world's largest set of open source components and frameworks.

Java and JavaFX version

  The project is using Java 8 and JavaFX 8. Java 8 introduces Lambda's which allows you to write much more concise code for {{{http://learnjavafx.typepad.com/weblog/2013/02/mary-had-a-little-%CE%BB.html?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+JamesWeaversJavafxBlog+%28James+Weaver%3Fs+JavaFX+Blog%29}JavaFX event handlers}} and
  optimize for multiple cores. JavaFX also introduces new features like touch device support and new controls. Java 8 is available as {{{http://jdk8.java.net/download.html}early access preview}}, and is expected to go final this year.